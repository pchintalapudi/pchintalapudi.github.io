(function(){"use strict";var e={5843:function(e,t,a){var n=a(9242),i=a(3396),o=a(7139);const r=(0,i.uE)('<button class="button">Toggle Dark Mode</button><div class="rays"><div class="ray"></div><div class="ray"></div><div class="ray"></div><div class="ray"></div></div>',2),s=[r];function c(e,t,a,n,r,c){const d=(0,i.up)("title-vue"),l=(0,i.up)("summary-vue"),u=(0,i.up)("education-vue"),m=(0,i.up)("work-vue"),p=(0,i.up)("projects-vue");return(0,i.wg)(),(0,i.iD)("main",{class:(0,o.C_)(e.darkMode?"dark":"light")},[(0,i._)("span",{class:(0,o.C_)(["dark-mode-toggle"]),onClick:t[0]||(t[0]=t=>e.toggleDarkMode())},s),(0,i.Wm)(d),(0,i.Wm)(l),(0,i.Wm)(u),(0,i.Wm)(m),(0,i.Wm)(p)],2)}var d=a(4870),l=a.p+"static/img/profile.558ded85.jpg";const u=e=>((0,i.dD)("data-v-11dcd9bf"),e=e(),(0,i.Cn)(),e),m={id:"title"},p={class:"header"},h=u((()=>(0,i._)("img",{src:l,alt:"A profile picture of Prem Chintalapudi"},null,-1))),g={class:"metadata"},f=u((()=>(0,i._)("h1",{class:"text"},"Prem Chintalapudi",-1))),b=u((()=>(0,i._)("h4",{class:"text"}," Masters of Engineering Candidate in Computer Science & Engineering at MIT ",-1))),v=["innerHTML"],y=(0,i.uE)('<section class="grid" data-v-11dcd9bf><section class="contact" data-v-11dcd9bf><address class="email" data-v-11dcd9bf><p data-v-11dcd9bf>premc</p><i aria-hidden="true" data-v-11dcd9bf>@SLDKFSON@@~!!~!@#$%^&amp;*()</i><p data-v-11dcd9bf>@</p><i aria-hidden="true" data-v-11dcd9bf>@SLDKFSON@@~!!~!@#$%^&amp;*()</i><p data-v-11dcd9bf>mit.edu</p></address><address class="phone" data-v-11dcd9bf><p data-v-11dcd9bf>925</p><i aria-hidden="true" data-v-11dcd9bf>@SLDKFSON@@~!!~!@#$%^&amp;*(234)567-9000</i><p data-v-11dcd9bf>216</p><i aria-hidden="true" data-v-11dcd9bf>@SLDKFSON@@~!!~!@#$%^&amp;*(875)456-213</i><p data-v-11dcd9bf>1580</p></address><address class="resume" data-v-11dcd9bf><a href="https://github.com/pchintalapudi/pchintalapudi.github.io/raw/master/src/assets/Prem_Chintalapudi_Resume.docx" download="" data-v-11dcd9bf>Resume (Download)</a></address><address class="linkedin" data-v-11dcd9bf><a href="https://linkedin.com/in/pchintalapudi" data-v-11dcd9bf>LinkedIn Profile</a></address></section><section class="links" data-v-11dcd9bf><a href="#summary" class="text blue" data-v-11dcd9bf><p data-v-11dcd9bf>Quick Summary</p></a><a href="#education" class="text red" data-v-11dcd9bf><p data-v-11dcd9bf>Education and Coursework</p></a><a href="#work" class="text green" data-v-11dcd9bf><p data-v-11dcd9bf>Work Experience</p></a><a href="#projects" class="text blue" data-v-11dcd9bf><p data-v-11dcd9bf>Personal Projects</p></a></section></section>',1);function w(e,t,a,n,o,r){return(0,i.wg)(),(0,i.iD)("article",m,[(0,i._)("section",p,[h,(0,i._)("article",g,[f,b,(0,i._)("p",{class:"text",innerHTML:e.summary},null,8,v)])]),y])}var k=a(65),I=[{name:"Software Performance Engineering",id:"6.172",tags:["cs"]},{name:"Design and Analysis of Algorithms",id:"6.046",tags:["cs"]},{name:"Distributed Systems",id:"6.824",tags:["cs"]},{name:"Computer Systems Security",id:"6.858",tags:["cs"]},{name:"Computational Systems Biology: Deep Learning in the Life Sciences",id:"6.874",tags:["cs","bio"]},{name:"Introduction to Machine Learning",id:"6.036",tags:["cs","bio"]},{name:"Elements of Software Construction",id:"6.031",tags:["cs"]},{name:"Fields, Forces and Flows in Biological Systems",id:"20.330",tags:["bio"]},{name:"Introduction to EECS via Interconnected Embedded Systems",id:"6.08",tags:["cs"]},{name:"Introduction to Algorithms",id:"6.006",tags:["cs"]},{name:"Linear Algebra",id:"18.06",tags:["cs","bio"]},{name:"Probability and Random Variables",id:"18.600",tags:["cs"]},{name:"Computation Structures",id:"6.004",tags:["cs"]},{name:"Fundamentals of Programming",id:"6.009",tags:["cs"]},{name:"Differential Equations",id:"18.03",tags:["cs","bio"]},{name:"Computer Systems Engineering",id:"6.033",tags:["cs"]},{name:"Biological Engineering Design",id:"20.380",tags:["bio"]},{name:"Introduction to Synthetic Biology",id:"6.589",tags:["bio","cs"]},{name:"Instrumentation and Measurement for Biological Systems",id:"20.309",tags:["cs","bio"]},{name:"Analysis of Biomolecular and Cellular Systems",id:"20.320",tags:["cs","bio"]},{name:"Laboratory Fundamentals in Biological Engineering",id:"20.109",tags:["bio"]},{name:"Thermodynamics of Biomolecular Systems",id:"20.110",tags:["bio"]},{name:"Laboratory Chemistry",id:"5.310",tags:["bio"]},{name:"Organic Chemistry II",id:"5.13",tags:["bio"]},{name:"General Biochemistry",id:"7.05",tags:["bio"]},{name:"Introduction to Psychological Science",id:"9.00",tags:["bio"]},{name:"Introduction to Computational Thinking and Data Science",id:"6.0002",tags:["cs","bio"]},{name:"Introduction to MATLAB",id:"6.057",tags:["cs","bio"]},{name:"Multivariable Calculus",id:"18.02",tags:["cs","bio"]},{name:"Introduction to C and C++",id:"6.179",tags:["cs"]},{name:"Introduction to Computer Science Programming in Python",id:"6.0001",tags:["cs","bio"]},{name:"Single-variable Calculus",id:"18.01",tags:["cs","bio"]},{name:"Physics II",id:"8.02",tags:["bio"]},{name:"Genetics",id:"7.03",tags:["bio"]},{name:"Physics I",id:"8.01",tags:["bio"]},{name:"Introductory Biology",id:"7.012",tags:["bio"]},{name:"Organic Chemistry I",id:"5.12",tags:["bio"]},{name:"Principles of Chemical Science",id:"5.111",tags:["bio"]}],S=[{id:"julia2",company:"JuliaLab",role:"Graduate Researcher",start:"01-2021",end:null,tags:["cs","research"],supervisors:[{title:"Professor",name:"Alan Edelman"},{title:"Supervisor",name:"Valentin Churavy"},{title:"Mentor",name:"Takafumi Arakaki"}],description:"I returned to JuliaLab for my masters thesis on reducing Julia's compilation latency. In this project, I leverage new capabilities exposed by LLVM's ORC JIT toolchain for lazier and parallel compilation to reduce the real time spent in the compiler. Currently, my efforts are focusing on removing a global lock that surrounds compilation and improving the LLVM-based memory management subsystem to support multithreaded compilation. I am also in charge of migrating Julia from LLVM's old pass manager to  LLVM's new pass manager, which promises more aggressive analysis caching to further  reduce time spent in compilation."},{id:"nvidia2",company:"NVIDIA",role:"Computer Architecture Intern",start:"05-2022",end:"09-2022",tags:["cs","internship"],supervisors:[{title:"Manager",name:"Prasad Gharpure"},{title:"Mentor",name:"Sameer Deshpande"}],description:"I returned to NVIDIA for a second internship with the PerfSim team, where I developed a new feature to track aggregated latency statistics on instructions as they flowed through a simulated GPU. By modifying the core infrastructure in small ways, I was able to provide support for tracking latency across a multitude of different GPU subunits without any extra development effort by the teams in charge of those subunits. Once a minimum viable product was created, I incorporated feedback from potential customers in the form of increased memory and cpu performance as well as a feature to log the paths of high latency instructions to enable thorough latency debugging across units."},{id:"tornado",company:"Tornado",role:"Data Science Intern",start:"01-2022",end:"01-2022",tags:["cs","internship"],supervisors:[{title:"Manager",name:"Hayden Cacace"}],description:"At Tornado, I worked on optimizing a machine learning model that was erroring due to lack of memory. To reduce memory usage, I leveraged more specific numpy and pandas matrix operations, which preallocated matrix space instead of growing sequentially. Doing so cut memory usage by more than 50% and saved significant CPU time. Additionally, I moved much of the processing from Python into the SQL query itself, which allowed the database processor to more efficiently retrieve records and further reduced memory consumption of python objects. I then added a number of new inputs to the model to improve its prediction capabilities using information available in the central database."},{id:"julia",company:"JuliaLab",role:"Undergraduate Researcher",start:"03-2021",end:"12-2021",tags:["cs","research"],supervisors:[{title:"Professor",name:"Alan Edelman"},{title:"Supervisor",name:"Valentin Churavy"},{title:"Mentor",name:"Takafumi Arakaki"}],description:"Building off my past experiences in [performance engineering](#6.172) and outlining a [virtual machine](#vm), I worked in MIT's JuliaLab to improve the Julia compiler. Over the course of two semesters I extended some of the Julia-specific passes in the runtime's compiler's LLVM optimization pipeline to minimize allocations. Specifically, I implemented multiple optimizations, including adjusting the code generator to avoid emitting useless instructions, hoisting allocations and write barriers out of loops, and teaching the compiler to hoist allocations out of specific branch idioms. These improvements have made it onto Julia's master branch and are scheduled to be available to users once Julia 1.8 is released."},{id:"nvidia",company:"NVIDIA",role:"Computer Architecture Intern",start:"06-2021",end:"08-2021",tags:["cs","internship"],supervisors:[{title:"Manager",name:"Braxton Thomason"},{title:"Mentor",name:"Sameer Deshpande"}],description:"For the summer after my junior year, I interned at [NVIDIA](nvidia.com), the company that invented the GPU. I designed and tested a replayer for simulated GPU packets. I was able to provide a low-cost extensible method of generating serialization methods without needing to explicitly specify the type of object that was being serialized. I also designed the program to save enough data to replicate segmentation faults and other signal-based program crashes while also incrementally compressing the saved data to reduce memory and disk usage. In the process of developing the system, I also honed my skills with using ssh, tmux, and Perforce as a version control system."},{id:"docai",company:"doc.ai",role:"Software Engineering Intern",start:"01-2021",end:"02-2021",tags:["cs","internship"],supervisors:[{title:"Manager",name:"Chethan Sarabu"},{title:"Mentor",name:"Jeremy Hartman"},{title:"Mentor",name:"Joel Kardaal"}],description:"At [doc.ai](doc.ai), I got my first taste of practical machine learning in a startup environment. Working with another intern from MIT, I developed a program that could parse clinical protocol PDFs using [pdfminer.six](https://github.com/pdfminer/pdfminer.six) into a document tree and then use [spacy.io](https://spacy.io)'s natural language functionality to classify the nodes of the document tree as different sections of the protocol. In terms of non-code experiences, I learned to effectively use git branches and merging, to use HomeBrew on macOS as a package manager, and the importance of maintaining open and responsive communication channels with other teams dependent on our code."},{id:"mcafee",company:"McAfee LLC",role:"Software Engineering Intern",start:"06-2020",end:"08-2020",tags:["cs","internship"],supervisors:[{title:"Manager",name:"Ritu Jain"}],description:"At [McAfee](https://www.mcafee.com/enterprise/en-us/solutions/cloud-security.html), I worked with a team on implementing security controls for [Connected Apps](https://www.youtube.com/watch?v=uazaXeCpEA4), 3rd party apps that can be installed into platforms such as G Suite and Office 365. Within the team, I worked on multiple projects, including securing endpoints with Spring Security, creating an automation test suite to verify page loads and estimate page load times, and adding new functionality to the application by creating new endpoints to support data aggregation into a chart view. Besides the actual code though, I also learned many other aspects of robust production-level programming, such as Jira issue tracking, the SVN version control system, automation testing using [Cypress](https://www.cypress.io/), the Maven build system, and Jenkins continuous integration."},{id:"la",company:"MIT EECS Department",role:"Lab Assistant for 6.009",start:"09-2019",end:"05-2020",description:"As a lab assistant for MIT's [6.009 Fundamentals of Programming](https://py.mit.edu) course, I had the responsiblities of both helping students understand and complete the problems on their assignments as well as assessing students on their solutions to the assignments in the class. In addition to learning new strategies of explaining ideas and code to other people, this job helped me develop skills in analyzing other people's code to quickly locate bugs and performance hotspots, and exposed me to many different styles of code and approaches to solving problems.",tags:["cs","internship"],supervisors:[]},{id:"broad",company:"Broad Institute of MIT and Harvard",role:"Undergraduate Researcher",start:"09-2019",end:"01-2020",description:"At the [Broad](https://www.broadinstitute.org/), my project involved working with VK2 cells, a human vaginal epithelial cell line, and characterizing their growth patterns in preparation for [co-culturing experiments](https://www.sciencedirect.com/topics/biochemistry-genetics-and-molecular-biology/coculture) with different types of bacteria. The cells were grown in PDMS microwells using supplemented keratinocyte cell media, and were stained with DAPI and phalloidin to both assess confluence and to validate staining on [PDMS](https://www.acs.org/content/acs/en/molecule-of-the-week/archive/p/polydimethylsiloxane.html) microwells. This project gave me experience in working with a laser cutter, fabricating and baking PDMS microwell chips for experiments, and process characterization.",supervisors:[{title:"Principal Investigator",name:"Paul Blainey"},{title:"Mentor",name:"Cheri Ackerman"}],tags:["bio","research"]},{id:"sandia",company:"Sandia National Laboratories",role:"Undergraduate Intern R&D",start:"06-2019",end:"08-2019",description:"My research project at [Sandia National Labs](https://www.sandia.gov/locations/livermore_california.html) was focused on mesenchymal stem cells, and characterizing their potential antibacterial properties. In support of this goal, I learned to make and pour agar plates and LB broth, culture bacterial and mammalian cells in a variety of environments, transfect and clone plasmids into mammalian and bacterial cells, and harvest DNA from bacteria for sequencing. From an assaying perspective, I learned the basics of flow cytometry and colony counting to assess antibacterial activity.",supervisors:[{title:"Principal Investigator",name:"Raga Krishnakumar"},{title:"Mentor",name:"Matthew Hirakawa"},{title:"Mentor",name:"Nikki Tjahjono"}],tags:["bio","internship","research"]},{id:"koch",company:"Koch Institute for Integrative Cancer Research",role:"Undergraduate Researcher",start:"02-2019",end:"05-2019",description:"As an undergraduate working in the [Koch Institute](https://ki.mit.edu/), I worked on assaying cells for proteins that complexed with [MENA](https://en.wikipedia.org/wiki/Ena/Vasp_homology_proteins), an actin regulator. In the process, I picked up several fundamental lab techniques, including aseptic handling, cell culture, Western blots, and co-immunoprecipitation. I also worked on a project to assess hypoxia in frozen mouse breast tumors, which allowed me to develop skills in tumor sectioning and slide staining.",supervisors:[{title:"Principal Investigator",name:"Frank Gertler"},{title:"Mentor",name:"Elen Torres"}],tags:["bio","research"]}],M=[{id:"vm",name:"Virtual Machine",description:"This project, written entirely in C++, has a main goal of producing a working virtual machine using no more than the C++ standard library and a few platform-specific APIs for virtual memory and memory-mapped files (Windows-only at the moment) that implements a garbage-collected language running on a compiled bytecode. The VM and bytecode are modeled loosely off the specifications of the JVM and CLR, minus multithreading-specific instructions. While the core parts of the virtual machine are complete, its friend projects to [create a standard library](https://github.com/pchintalapudi/vm-lib) for its custom bytecode and [write a compiler](https://github.com/pchintalapudi/bcode-compiler) for that bytecode are ongoing. Thus far, the project has taught me a lot about how the JVM and CLR and other virtual machines work under the hood, and I expect the projects to continue teaching me new things for a while to come.",tags:["c++","templates","memory","management","file","garbage","collection","computer","programming","code"],start:"06-2020",end:null,github:"https://github.com/pchintalapudi/virtual-machine"},{id:"personal",name:"Personal Website",description:"This project (displayed here), is the project to build my own personal website that presents the information on my resume in a more visually appealing manner. After converting my resume's information into YAML files and marking out particular metadata within those, I use Vue.js to render the content in those YAML files dynamically. Apart from Vue.js and a few Markdown and YAML parsing libraries, I don't include any other dependencies to keep the website lightweight and as personalized as possible. I also cross-check my website against Chrome's Lighthouse website audits to ensure that I'm meeting good web development standards for performance, accessibility, and SEO.",tags:["typescript","vue","html","css","computer","programming","code"],start:"08-2020",end:null,github:"https://github.com/pchintalapudi/pchintalapudi.github.io",link:"https://pchintalapudi.github.io/"},{id:"planner",name:"Course Planner",description:"My course planner, inspired and partially reverse-engineered from [CourseRoad](https://courseroad.mit.edu), was created because my schedule of classes put some strain on the more official site. In my version, I adopted a more asynchronous design, which allows the website to display content and react to user input even as resources are still loading. It also takes heavy advantage of the localStorage API to cache class descriptions and store the user's schedule. Also, I brought back a feature from an older version of CourseRoad, namely prerequisite and corequisite links. This was originally dropped as drawing the links requires breaking component boundaries and is at odds with how Vue is designed, but I was able to add hooks into resize listeners and my own modification APIs to simply redraw minimal amounts of the graph on changes to courses.",tags:["typescript","vue","html","css","computer","programming","code"],start:"12-2019",end:"01-2020",github:"https://github.com/pchintalapudi/courses",link:"https://pchintalapudi.github.io/courses"},{id:"drawer",name:"Molecule Drawer",description:"This project in particular has been a long journey, from its original inception in JavaFX and Java to its current form in Vue.js and Typescript. Modeled after ChemDraw, the drawer uses SVG and a healthy amount of CSS to render pictures of molecules drawn in both line structures and an almost-3D mode (it fakes it using gradients and 2D shapes on the same plane). Additionally, it supports inferring hydrogens, a feature that significantly reduces the time taken to generate ball-and-stick models. I was able to learn a decent amount of CSS transforms and geometry of mouse translation, as well as designing and redesigning many aspects of the program as it progressed through many UX and language iterations.",tags:["typescript","vue","html","css","javafx","java","computer","programming","code"],start:"06-2018",end:"07-2019",github:"https://github.com/pchintalapudi/mdraw",link:"https://pchintalapudi.github.io/mdraw"},{id:"browser",name:"Rendering Engine",description:"For a long time, I had a pet project to build a rendering engine (like Blink or Gecko). My main takeaway from this experience is that this is HARD. There's a reason why Edge and Opera have moved from their own implementations to Blink. However, even though I wasn't able to make too much headway on the project, I did get a good look at two things: V8's native API, and the specifications underlying the DOM models. The experience with DOM model specifications proved to be very invaluable as I progressed into writing HTML/CSS/Javascript and scraping data from websites, and I was able to take what I had seen of the V8 API into account while building my own virtual machine.",tags:["c++","java","v8","dom","html","javascript","computer","programming","code"],start:"08-2019",end:"01-2020",github:"https://github.com/pchintalapudi/v8-render-engine"},{id:"simulator",name:"VEX In The Zone Simulator",description:"This was my first production-quality project, where I built a simulator for the VEX 2017-2018 challenge [In The Zone](https://www.youtube.com/watch?v=1Yo_mlR1VJU). This project taught me a lot about the non-code parts of programs, like documentation and configuration files, as well as being my first real foray into optimizing the user experience. This project was where I first learned that multithreading could be used to speed up a program, my first time using a server in Java (no more than a bare ServerSocket-Socket pair), and a place where I figured out what things could go wrong in a multithreaded program and how to fix them.",tags:["java","javafx","css","multithreading","computer","programming","code"],start:"08-2017",end:"04-2018",github:"https://github.com/pchintalapudi/itz"},{id:"calc",name:"JavaFX Graphing Calculator",description:"This project was inspired by a challenge in AP Calculus BC to create a program that could take derivatives and output their graphs. I expanded beyond the parameters of the problem to also implement my own shunting-yard based expression parser, as well as graphing non-polynomial functions and integrals as well as derivatives. Although this project is not on GitHub, it is mentioned here because this was the project where I learned about what factors actually affected performance: caching, branch prediction and speculative execution, and most importantly algorithmic optimizations as opposed to peephole microoptimizations. In fact, one of my most memorable experiences on this project was converting the function evaluator from running on 4 threads to running on a single thread and observing a 5X speedup, simply from the effects of cache thrashing and heavily improved branch prediction. Eventually I converted it back to a multithreaded evaluator, but this time I took the aforementioned factors into account and achieved a modest speedup over the single-threaded evaluator.",tags:["java","javaFX","multithreading","design","patterns","computer","programming","code"],start:"10-2017",end:"04-2018"}],j="I'm a Master of Engineering student at MIT working on performance improvements for the [Julia compiler](https://github.com/JuliaLang/julia/pulls?q=is%3Apr+author%3Apchintalapudi+). I'm interested in designing and implementing efficient, performant, and resilient software systems that are also readable and maintainable. I enjoy working in a collaborative environment, where ideas are refined to a minimalistic yet powerful solution to the problem at hand. I'm often described as a dedicated individual, who will finish their assigned tasks on time.";const C=Symbol(),_=(0,k.MT)({state:{courses:I,work:S,projects:M,summary:j},mutations:{},actions:{},modules:{}});function D(){return(0,k.oR)(C)}var x=a(5068),A=(0,i.aZ)({setup(){},computed:{summary(){return(0,x.TU)(D().state.summary)}}}),P=a(89);const T=(0,P.Z)(A,[["render",w],["__scopeId","data-v-11dcd9bf"]]);var L=T;const E=e=>((0,i.dD)("data-v-b5eb4fd6"),e=e(),(0,i.Cn)(),e),V={id:"summary"},z={class:"linkable",href:"#education",style:{"--linkable-color":"var(--red)"}},J=E((()=>(0,i._)("h2",null,"Education and Coursework",-1))),F={class:"data"},B=E((()=>(0,i._)("p",{class:"conjunction"},"and",-1))),O={class:"linkable",href:"#work",style:{"--linkable-color":"var(--green)"}},W=E((()=>(0,i._)("h2",null,"Internships and Research",-1))),R={class:"data"},H=E((()=>(0,i._)("p",{class:"conjunction"},"and",-1))),Z={class:"linkable",href:"#projects",style:{"--linkable-color":"var(--blue)"}},G=E((()=>(0,i._)("h2",null,"Skills and Expertise",-1))),N={class:"data"},U=E((()=>(0,i._)("p",{class:"conjunction"},"and",-1)));function q(e,t,a,n,o,r){const s=(0,i.up)("icon-vue"),c=(0,i.up)("numbered-stat");return(0,i.wg)(),(0,i.iD)("article",V,[(0,i._)("section",null,[(0,i._)("a",z,[(0,i.Wm)(s,{color:"red",icon:"school"}),J]),(0,i._)("div",F,[(0,i.Wm)(c,{name:"Undergraduate Majors",number:2,subtext:"Computer Science Engineering and Bioengineering"}),B,(0,i.Wm)(c,{name:"Classes",number:e.classes.length,subtext:"Engineering, Science, Math, Design"},null,8,["number"])])]),(0,i._)("section",null,[(0,i._)("a",O,[(0,i.Wm)(s,{color:"green",icon:"science"}),W]),(0,i._)("div",R,[(0,i.Wm)(c,{name:"Internships",number:e.internships.length,subtext:Array.from(new Set(e.internships.map((e=>e.company)))).join(", ")},null,8,["number","subtext"]),H,(0,i.Wm)(c,{name:"Research Groups",number:e.research.length,subtext:Array.from(new Set(e.research.map((e=>e.company)))).join(", ")},null,8,["number","subtext"])])]),(0,i._)("section",null,[(0,i._)("a",Z,[(0,i.Wm)(s,{color:"blue",icon:"devices"}),G]),(0,i._)("div",N,[(0,i.Wm)(c,{name:"Programming Languages",number:e.languages.length,subtext:e.languages.join(", ")},null,8,["number","subtext"]),U,(0,i.Wm)(c,{name:"Focus Areas",number:e.focuses.length,subtext:e.focuses.join(", ")},null,8,["number","subtext"])])])])}a(6699);const K={class:"stat"},Y={class:"number"},X={class:"name"},$={class:"inline-number","aria-hidden":"true"},Q={class:"subtext"};function ee(e,t,a,n,r,s){return(0,i.wg)(),(0,i.iD)("article",K,[(0,i._)("h3",Y,(0,o.zw)(e.number),1),(0,i._)("h4",X,[(0,i._)("p",$,(0,o.zw)(e.number),1),(0,i.Uk)(" "+(0,o.zw)(e.name),1)]),(0,i._)("p",Q,(0,o.zw)(e.subtext),1)])}var te=(0,i.aZ)({props:{name:String,number:Number,subtext:String}});const ae=(0,P.Z)(te,[["render",ee],["__scopeId","data-v-4b03f045"]]);var ne=ae;function ie(e,t,a,n,r,s){return(0,i.wg)(),(0,i.iD)("p",{class:(0,o.C_)(["icon",e.color])},(0,o.zw)(e.icon),3)}var oe=(0,i.aZ)({props:{color:String,icon:String}});const re=(0,P.Z)(oe,[["render",ie],["__scopeId","data-v-474cc7d2"]]);var se=re,ce=(0,i.aZ)({components:{NumberedStat:ne,IconVue:se},setup(){},computed:{internships(){return D().state.work.filter((e=>e.tags.includes("internship")&&!e.hidden))},research(){return D().state.work.filter((e=>e.tags.includes("research")&&!e.hidden))},classes(){return D().state.courses},projects(){return D().state.projects},languages(){return["C++","Java","Python","C","Typescript","Javascript","MATLAB","Go","Julia","Bash"]},focuses(){return["High Performance Standards","Robust System Design","Intuitive Interfaces"]}}});const de=(0,P.Z)(ce,[["render",q],["__scopeId","data-v-b5eb4fd6"]]);var le=de;const ue={id:"education"},me=(0,i.uE)('<h2 class="title" data-v-7a713945>Education and Coursework</h2><h3 class="school" data-v-7a713945>Massachusetts Institute of Technology</h3><h4 class="degree" data-v-7a713945>Masters of Engineering in <mark class="red" data-v-7a713945>Electrical Engineering and Computer Science</mark></h4><h4 class="degree" data-v-7a713945> Bachelor of Science in <mark class="red" data-v-7a713945>Computer Science Engineering</mark> and <mark class="red" data-v-7a713945>Bioengineering</mark></h4>',4),pe={class:"courses"},he=["id"];function ge(e,t,a,n,r,s){const c=(0,i.up)("icon-vue");return(0,i.wg)(),(0,i.iD)("article",ue,[(0,i.Wm)(c,{color:"red",icon:"school"}),me,(0,i._)("section",pe,[((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)(e.classes,((e,t)=>((0,i.wg)(),(0,i.iD)("article",{key:e.id,id:e.id,class:(0,o.C_)([...e.tags,"class",t<5?"":t<10?"top10":t<20?"top20":"all"])},[(0,i._)("h5",null,(0,o.zw)(e.name),1),(0,i._)("i",null,(0,o.zw)(e.id),1)],10,he)))),128))])])}var fe=(0,i.aZ)({components:{IconVue:se},computed:{classes(){return D().state.courses}}});const be=(0,P.Z)(fe,[["render",ge],["__scopeId","data-v-7a713945"]]);var ve=be;const ye=e=>((0,i.dD)("data-v-2e10cef2"),e=e(),(0,i.Cn)(),e),we={id:"work"},ke=ye((()=>(0,i._)("h2",{class:"header"},"Work Experience",-1))),Ie={class:"experiences"},Se=["id"],Me={class:"metadata"},je={key:0},Ce={key:1},_e=["innerHTML"];function De(e,t,a,n,r,s){const c=(0,i.up)("icon-vue");return(0,i.wg)(),(0,i.iD)("article",we,[(0,i.Wm)(c,{color:"green",icon:"science"}),ke,(0,i._)("section",Ie,[((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)(e.experiences,(t=>((0,i.wg)(),(0,i.iD)("article",{key:t.id,class:(0,o.C_)([...t.tags,"work"]),id:t.id},[(0,i._)("h3",null,(0,o.zw)(t.company),1),(0,i._)("span",Me,[(0,i._)("h4",null,(0,o.zw)(t.role),1),t.start!=t.end?((0,i.wg)(),(0,i.iD)("i",je,(0,o.zw)(e.dateFromString(t.start))+" to "+(0,o.zw)(e.dateFromString(t.end)),1)):((0,i.wg)(),(0,i.iD)("i",Ce,(0,o.zw)(e.dateFromString(t.start)),1))]),(0,i._)("p",{class:"description",innerHTML:e.markdown(t.description)},null,8,_e)],10,Se)))),128))])])}var xe=(0,i.aZ)({components:{IconVue:se},computed:{experiences(){return D().state.work}},methods:{dateFromString(e){if(null===e)return"Present";const[t,a]=e.split("-");return new Date((new Date).getFullYear(),+t-1).toLocaleString("default",{month:"long"})+" "+a},markdown(e){return(0,x.TU)(e)}}});const Ae=(0,P.Z)(xe,[["render",De],["__scopeId","data-v-2e10cef2"]]);var Pe=Ae;const Te=e=>((0,i.dD)("data-v-baaae1c8"),e=e(),(0,i.Cn)(),e),Le={id:"projects"},Ee={class:"body"},Ve=Te((()=>(0,i._)("h2",{class:"header"},"Personal Projects",-1))),ze={class:"projects"},Je=["id"],Fe={class:"metadata"},Be=["innerHTML"],Oe=["href"],We=["href"];function Re(e,t,a,n,r,s){const c=(0,i.up)("icon-vue");return(0,i.wg)(),(0,i.iD)("article",Le,[(0,i.Wm)(c,{color:"blue",icon:"devices"}),(0,i._)("section",Ee,[(0,i._)("section",null,[Ve,(0,i._)("section",ze,[((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)(e.projects,(t=>((0,i.wg)(),(0,i.iD)("article",{key:t.id,class:(0,o.C_)([...t.tags,"project"]),id:t.id},[(0,i._)("h3",null,(0,o.zw)(t.name),1),(0,i._)("span",Fe,[(0,i._)("i",null,(0,o.zw)(e.dateFromString(t.start))+" to "+(0,o.zw)(e.dateFromString(t.end)),1)]),(0,i._)("p",{class:"description",innerHTML:e.markdown(t.description)},null,8,Be),t.github?((0,i.wg)(),(0,i.iD)("a",{key:0,href:t.github,class:"link"},"GitHub Project",8,Oe)):(0,i.kq)("",!0),t.link?((0,i.wg)(),(0,i.iD)("a",{key:1,href:t.link,class:"link"},"Live Demo",8,We)):(0,i.kq)("",!0)],10,Je)))),128))])])])])}var He=(0,i.aZ)({components:{IconVue:se},computed:{projects(){return D().state.projects}},methods:{dateFromString(e){if(null===e)return"Present";const[t,a]=e.split("-");return new Date((new Date).getFullYear(),+t-1).toLocaleString("default",{month:"long"})+" "+a},markdown(e){return(0,x.TU)(e)}}});const Ze=(0,P.Z)(He,[["render",Re],["__scopeId","data-v-baaae1c8"]]);var Ge=Ze,Ne=(0,i.aZ)({setup(){const e=(0,d.iH)(!1),t=localStorage.getItem("darkmode");if(null===t){const t=t=>{const a=localStorage.getItem("darkmode");null===a&&(e.value=t.matches)},a=window.matchMedia("(prefers-color-scheme: dark)");(0,i.bv)((()=>a.addEventListener("change",t))),(0,i.Jd)((()=>a.removeEventListener("change",t))),e.value=a.matches}else e.value="dark"===t;return{darkMode:e}},name:"App",components:{TitleVue:L,SummaryVue:le,EducationVue:ve,WorkVue:Pe,ProjectsVue:Ge},methods:{toggleDarkMode(){this.darkMode=!this.darkMode,localStorage.setItem("darkmode",this.darkMode?"dark":"light")}}});const Ue=(0,P.Z)(Ne,[["render",c]]);var qe=Ue;(0,n.ri)(qe).use(_,C).mount("#app")}},t={};function a(n){var i=t[n];if(void 0!==i)return i.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,a),o.exports}a.m=e,function(){var e=[];a.O=function(t,n,i,o){if(!n){var r=1/0;for(l=0;l<e.length;l++){n=e[l][0],i=e[l][1],o=e[l][2];for(var s=!0,c=0;c<n.length;c++)(!1&o||r>=o)&&Object.keys(a.O).every((function(e){return a.O[e](n[c])}))?n.splice(c--,1):(s=!1,o<r&&(r=o));if(s){e.splice(l--,1);var d=i();void 0!==d&&(t=d)}}return t}o=o||0;for(var l=e.length;l>0&&e[l-1][2]>o;l--)e[l]=e[l-1];e[l]=[n,i,o]}}(),function(){a.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return a.d(t,{a:t}),t}}(),function(){a.d=function(e,t){for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})}}(),function(){a.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()}(),function(){a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}}(),function(){a.p="/"}(),function(){var e={143:0};a.O.j=function(t){return 0===e[t]};var t=function(t,n){var i,o,r=n[0],s=n[1],c=n[2],d=0;if(r.some((function(t){return 0!==e[t]}))){for(i in s)a.o(s,i)&&(a.m[i]=s[i]);if(c)var l=c(a)}for(t&&t(n);d<r.length;d++)o=r[d],a.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return a.O(l)},n=self["webpackChunkpersonal_website"]=self["webpackChunkpersonal_website"]||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))}();var n=a.O(void 0,[998],(function(){return a(5843)}));n=a.O(n)})();
//# sourceMappingURL=app.4d8bab2d.js.map